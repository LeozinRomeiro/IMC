@inherits LayoutComponentBase

@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;

@if (AppState.History.Count == 0)
{
    <p>
        <em>Nenhum resultado encontrado...</em>
    </p>
}
else
{
    <div class="content">
        <div class="flex flex-center">
            <input type="text" class="search" placeholder="Digite a busca..." @bind-value="searchText">
            <button class="btn btn-filled btn-auto mb" @onclick="OnSearch" style="margin-top: 20px;">Pesquisar</button>
        </div>
        <ul class="list-unstyled">
            @foreach (var item in AppState.ViewHistory)
            {
                <li>
                    <div class="list-item">
                        <div class="list-item-image">
                            <ImcNumber Status="item.Status" Value="item.Value" />
                        </div>
                        <div class="list-item-description">
                            <div class="list-item-description-title">
                                <h4>@item.Title</h4>
                                <small>@item.FormattedRegistered</small>
                            </div>
                            <div class="list-item-description-text">
                                <span>
                                    @item.Height metros de altura e @item.Weight kilos de peso.
                                </span>
                            </div >
                        </div >
                    </div >
                </li>
            }
        </ul>
    </div>
}

@code {

    private List<IMCViewModel> filteredModels = new();
    private string searchText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        AppState.OnChanged += OnAppStateChanged;
        await AppState.UpdateHistoryAsync(LocalStorage);
    }

    void Dispose()
    {
        AppState.OnChanged -= OnAppStateChanged;
    }

    private void OnAppStateChanged(object? o, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }
    private void OnSearch()
    {
        AppState.UpdateView();
        string searchTextLower = searchText.ToLower();
        filteredModels = AppState.ViewHistory.Where(item => item.Title.ToLower().Contains(searchTextLower)).ToList();
        AppState.ViewHistory = filteredModels;
    }
}
